<?xml version="1.0" encoding="UTF-8"?>  
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
     "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="EVENT">
	<!-- <resultMap type="com.smartool.common.dto.Event" id="event"> <id property="eventId" 
		column="eventId" /> <result property="eventTime" column="eventTime" /> <result 
		property="name" column="eventName" /> <result property="eventType" column="eventType" 
		/> <result property="eventTypeId" column="eventTypeId" /> <result property="quota" 
		column="quota" /> <result property="createdTime" column="createdTime" /> 
		<result property="lastModifiedTime" column="lastModifiedTime" /> <collection 
		property="attendees" ofType="com.smartool.common.dto.Attendee"> <id property="id" 
		column="attendeeId" /> <result property="userId" column="userId" /> </collection> 
		</resultMap> <select id="listAllWithAttendees" resultMap="event"> select 
		e.eventTime as eventTime, e.name as eventName, t.name as eventType, e.id 
		as eventId, t.id as eventTypeId, e.quota as quota, a.id as attendeeId, a.userId 
		as userId, e.createdTime as createdTime, e.lastModifiedTime as lastModifiedTime 
		from events e, eventTypes t, attendees a where e.eventTypeId=t.id and a.eventId 
		= e.id </select> -->
	<resultMap type="com.smartool.common.dto.Event" id="event">
		<id property="id" column="eventId" />
		<result property="eventTime" column="eventTime" />
		<result property="name" column="eventName" />
		<result property="siteId" column="siteId" />
		<result property="eventType" column="eventType" />
		<result property="eventTypeId" column="eventTypeId" />
		<result property="seriesId" column="seriesId" />
		<result property="stage" column="stage" />
		<result property="status" column="status" />
		<result property="quota" column="quota" />
		<result property="isEventTeam" column="isEventTeam" />
		<result property="isSerieTeam" column="isSerieTeam" />
		<result property="createdTime" column="createdTime" />
		<result property="lastModifiedTime" column="lastModifiedTime" />
		<collection property="attendees" ofType="com.smartool.common.dto.Attendee">
			<id property="id" column="attendeeId" />
			<result property="kidName" column="kidName" />
			<result property="eventId" column="eventId" />
			<result property="kidId" column="kidId" />
			<result property="userId" column="userId" />
			<result property="teamId" column="teamId" />
			<result property="teamName" column="teamName" />
			<result property="tagId" column="tagId" />
			<result property="tag" column="tag" />
			<result property="score" column="score" />
			<result property="rank" column="rank" />
			<result property="seq" column="seq" />
			<result property="status" column="attendeeStatus" />
			<result  property="attendeeNotifyTimes" column="attendeeNotifyTimes" />
		</collection>
	</resultMap>
	<select id="listAll" resultMap="event">
		SELECT e.eventTime as eventTime,
		e.name as eventName, t.name as
		eventType, e.id as eventId,
		t.id as
		eventTypeId, e.quota as quota,
		e.siteId as siteId,
		e.createdTime as
		createdTime,
		e.lastModifiedTime as
		lastModifiedTime,
		attendeeId,
		kidId,
		score,
		rank,
		kidName,
		userId,
		seq,
		tagId,
		tag,
		attendeeNotifyTimes,
		attendeeStatus,
		e.stage as
		stage,
		e.seriesId as seriesId,
		s.isTeam as
		isSerieTeam,
		e.isTeam as
		isEventTeam,
		e.status as status,
		teamName,
		teamId
		FROM events e
		JOIN
		eventTypes t on t.id=
		e.eventTypeId
		JOIN series s on s.id=e.seriesId
		LEFT JOIN ( select a.id
		as attendeeId, k.id as kidId, k.name as
		kidName,
		a.userId as userId,a.notify_times as attendeeNotifyTimes,
		a.rank as rank, a.score as score, a.seq as
		seq,
		a.status as
		attendeeStatus, a.eventId as eventId, ts.name as
		teamName, ts.id as teamId, a.tagId as
		tagId, tg.name as tag
		from kids k
		JOIN attendees a on a.kidId=k.id
		LEFT
		JOIN teams ts
		on k.teamId=ts.id
		LEFT JOIN tags tg on a.tagId=tg.id) akts on e.id = akts.eventId
	</select>

	<select id="listAllBySiteId" resultMap="event" parameterType="String">
		SELECT e.eventTime as eventTime,
		e.name as eventName, t.name as
		eventType, e.id as eventId,
		t.id as
		eventTypeId, e.quota as quota,
		e.siteId as siteId,
		e.createdTime as
		createdTime,
		e.lastModifiedTime as
		lastModifiedTime,
		e.status as status,
		attendeeId,
		kidId,
		score,
		rank,
		kidName,
		userId,
		seq,
		tagId,
		tag,
		attendeeStatus,
		attendeeNotifyTimes,
		e.stage as
		stage,
		e.seriesId as seriesId,
		s.isTeam as
		isSerieTeam,
		e.isTeam as
		isEventTeam,
		teamName,
		teamId
		FROM events e
		JOIN
		eventTypes t on t.id=
		e.eventTypeId
		JOIN series s on s.id=e.seriesId
		LEFT JOIN ( select a.id
		as attendeeId, a.notify_times as attendeeNotifyTimes, k.id as kidId, k.name as
		kidName,
		a.userId as userId,
		a.rank as rank, a.score as score, a.seq as
		seq,
		a.status as
		attendeeStatus, a.eventId as eventId, ts.name as
		teamName, ts.id as teamId, a.tagId as
		tagId, tg.name as tag
		from kids k
		JOIN attendees a on a.kidId=k.id
		LEFT
		JOIN teams ts
		on k.teamId=ts.id
		LEFT JOIN tags tg on a.tagId=tg.id) akts on e.id = akts.eventId
		WHERE
		e.siteId=#{siteId}
	</select>

	<select id="listAllStatus" parameterType="int" resultMap="event">
		SELECT e.eventTime as eventTime,
		e.name as eventName, t.name as
		eventType, e.id as eventId,
		t.id as
		eventTypeId, e.quota as quota,
		e.siteId as siteId,
		e.createdTime as
		createdTime,
		e.lastModifiedTime as
		lastModifiedTime,
		e.status as status,
		attendeeId,
		kidId,
		score,
		rank,
		kidName,
		userId,
		seq,
		tagId,
		tag,
		attendeeStatus,
		attendeeNotifyTimes,
		e.stage as
		stage,
		e.seriesId as seriesId,
		s.isTeam as
		isSerieTeam,
		e.isTeam as
		isEventTeam,
		teamName,
		teamId
		FROM events e
		JOIN
		eventTypes t on t.id=
		e.eventTypeId
		JOIN series s on s.id=e.seriesId
		LEFT JOIN ( select a.id
		as attendeeId, k.id as kidId, k.name as
		kidName,
		a.userId as userId,
		a.rank as rank, a.score as score, a.seq as
		seq,
		a.status as
		attendeeStatus, a.notify_times as attendeeNotifyTimes, a.eventId as eventId, ts.name as
		teamName, ts.id as teamId, a.tagId as
		tagId, tg.name as tag
		from kids k
		JOIN attendees a on a.kidId=k.id
		LEFT
		JOIN teams ts
		on k.teamId=ts.id
		LEFT JOIN tags tg on a.tagId=tg.id) akts on e.id = akts.eventId
		WHERE
		e.status =
		#{status};
	</select>

	<select id="remove" parameterType="String">
		delete from events where id =
		#{id}
	</select>

	<select id="listFullAll" resultMap="event">
		SELECT e.eventTime as eventTime,
		e.name as eventName, t.name as
		eventType, e.id as eventId,
		t.id as
		eventTypeId, e.quota as quota,
		e.siteId as siteId,
		e.createdTime as
		createdTime,
		e.lastModifiedTime as
		lastModifiedTime,
		e.status as status,
		attendeeId,
		kidId,
		score,
		rank,
		kidName,
		userId,
		seq,
		tagId,
		tag,
		attendeeStatus,
		attendeeNotifyTimes,
		e.stage as
		stage,
		e.seriesId as seriesId,
		s.isTeam as
		isSerieTeam,
		e.isTeam as
		isEventTeam,
		teamName,
		teamId
		FROM events e
		JOIN
		eventTypes t on t.id=
		e.eventTypeId
		JOIN series s on s.id=e.seriesId
		LEFT JOIN ( select a.id
		as attendeeId, k.id as kidId, k.name as
		kidName,
		a.userId as userId,
		a.rank as rank, a.score as score, a.seq as
		seq,
		a.status as
		attendeeStatus, a.notify_times as attendeeNotifyTimes, a.eventId as eventId, ts.name as
		teamName, ts.id as teamId, a.tagId as
		tagId, tg.name as tag
		from kids k
		JOIN attendees a on a.kidId=k.id
		LEFT
		JOIN teams ts
		on k.teamId=ts.id
		LEFT JOIN tags tg on a.tagId=tg.id) akts on e.id = akts.eventId
	</select>
	
	<select id="search" parameterType="Map" resultMap="event">
		SELECT e.eventTime as eventTime,
		e.name as eventName, t.name as
		eventType, e.id as eventId,
		t.id as
		eventTypeId, e.quota as quota,
		e.siteId as siteId,
		e.createdTime as
		createdTime,
		e.lastModifiedTime as
		lastModifiedTime,
		e.status as status,
		attendeeId,
		kidId,
		score,
		rank,
		kidName,
		userId,
		seq,
		tagId,
		tag,
		attendeeStatus,
		attendeeNotifyTimes,
		e.stage as
		stage,
		e.seriesId as seriesId,
		s.isTeam as
		isSerieTeam,
		e.isTeam as
		isEventTeam,
		teamName,
		teamId
		FROM events e
		JOIN
		eventTypes t on t.id=
		e.eventTypeId
		JOIN series s on s.id=e.seriesId
		LEFT JOIN ( select a.id
		as attendeeId, k.id as kidId, k.name as
		kidName,
		a.userId as userId,
		a.rank as rank, a.score as score, a.seq as
		seq, a.notify_times as attendeeNotifyTimes,
		a.status as
		attendeeStatus, a.eventId as eventId, ts.name as
		teamName, ts.id as teamId, a.tagId as
		tagId, tg.name as tag
		from kids k
		JOIN attendees a on a.kidId=k.id
		LEFT
		JOIN teams ts
		on k.teamId=ts.id
		LEFT JOIN tags tg on a.tagId=tg.id) akts on e.id = akts.eventId
		<trim prefix="WHERE" prefixOverrides="AND |OR ">
			<if test="status != null">
				AND e.status = #{status}
			</if>
			<if test="siteId != null">
				AND e.siteId=#{siteId}
			</if>
			<if test="seriesId != null">
				AND e.seriesId = #{seriesId}
			</if>
		</trim>
	</select>

	<select id="create" parameterType="com.smartool.common.dto.Event">
		insert events (id, name,
		eventTypeId,siteId, quota, stage, eventTime, seriesId, isTeam,
		createdTime,lastModifiedTime)
		values
		(#{id},#{name},#{eventTypeId},#{siteId},#{quota},#{stage},#{eventTime},#{seriesId},
		#{isTeam}, now(),now())
	</select>


	<select id="getFullById" parameterType="String" resultMap="event">
		SELECT e.eventTime as eventTime,
		e.name as eventName, t.name as
		eventType, e.id as eventId,
		t.id as
		eventTypeId, e.quota as quota,
		e.siteId as siteId,
		e.createdTime as
		createdTime,
		e.lastModifiedTime as
		lastModifiedTime,
		e.status as status,
		attendeeId,
		kidId,
		score,
		rank,
		kidName,
		userId,
		seq,
		tagId,
		tag,
		attendeeStatus,
		attendeeNotifyTimes,
		e.stage as
		stage,
		e.seriesId as seriesId,
		s.isTeam as
		isSerieTeam,
		e.isTeam as
		isEventTeam,
		teamName,
		teamId
		FROM events e
		JOIN
		eventTypes t on t.id=
		e.eventTypeId
		JOIN series s on s.id=e.seriesId
		LEFT JOIN ( select a.id
		as attendeeId, k.id as kidId, k.name as
		kidName,
		a.userId as userId,
		a.rank as rank, a.score as score, a.seq as
		seq,
		a.status as
		attendeeStatus, a.notify_times as attendeeNotifyTimes, a.eventId as eventId, ts.name as
		teamName, ts.id as teamId, a.tagId as
		tagId, tg.name as tag
		from kids k
		JOIN attendees a on a.kidId=k.id
		LEFT
		JOIN teams ts
		on k.teamId=ts.id
		LEFT JOIN tags tg on a.tagId=tg.id) akts on e.id = akts.eventId
		WHERE
		e.id =
		#{id};
	</select>
	
	

	<select id="getById" parameterType="String"
		resultType="com.smartool.common.dto.Event">
		select * from events where id = #{id};
	</select>


	<select id="update" parameterType="com.smartool.common.dto.Event">
		update events
		set
		name=#{name},
		quota=#{quota},
		eventTypeId=#{eventTypeId},
		siteId=#{siteId},
		stage=#{stage},
		status=#{status},
		seriesId=#{seriesId},
		isTeam=#{isTeam},
		eventTime=#{eventTime}
		where id =
		#{id};
	</select>
</mapper>
